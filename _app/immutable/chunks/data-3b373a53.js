import{Y as t}from"./index-35809990.js";const a=()=>{const e=t("__svelte__");return{page:{subscribe:e.page.subscribe},navigating:{subscribe:e.navigating.subscribe},get preloading(){return console.error("stores.preloading is deprecated; use stores.navigating instead"),{subscribe:e.navigating.subscribe}},session:e.session,updated:e.updated}},n={subscribe(e){return a().page.subscribe(e)}},s=[{id:0,title:"Svelte vs React: Ending the Debate",slug:"svelte-vs-react-ending-the-debate",author:{id:0,name:"Paulina",lastName:"Gajewska",slug:"paulina-gajewska",userName:"author",email:"author@gmail.com",avatar:"https://miro.medium.com/fit/c/176/176/1*zH2vEHbbMF4S6_7EgsvgRA.jpeg",bio:"Hi this is Paulina.I am a front-end developer.I love to create beautiful and functional websites.",website:"https://author.com",facebook:"https://facebook.com",twitter:"https://twitter.com",gmail:"https://gmail.com"},description:"Are you on the fence in the Svelte vs React debate? You\u2019re not the only one",content:"Are you on the fence in the Svelte vs React debate? You\u2019re not the only one. Nowadays, picking the best tool is a challenge, especially with all the conflicting voices screaming on the internet. We\u2019re constantly attacked by headlines such as: React is dead. Svelte was dead before its development. And then we see: React will shape the future. Svelte is the future. In this article, we don\u2019t want to side with one party or the other. Instead, we want to show when those tools are applicable and which circumstances make them shine bright like a diamond. Remember that so far, there are no universal tools available that can solve every problem. So don\u2019t choose the technology that\u2019s trendy: choose the one that\u2019ll solve your problem in the most efficient way. React React, being a much\u2013favored technology at MPC, has been already discussed several times. We\u2019ve explained what is React in the first place, why React is a good choice, and how it differs from React Native. But let me give you a small reminder: React is a JavaScript library dedicated to front-end development, specifically for building user interfaces made of reusable components. It was created by Facebook (original author: Jordan Walke) in 2011 for their own use and is maintained by them to this day. It was made open-sourced two years later and it quickly gained popularity. It\u2019s particularly well-known for being fairly easy to learn, its extremely fast development, and a giant community of ready-to-help developers. One of its most famous features is Virtual DOM, which enhances the performance of React apps. Svelte What is it? Svelte is one of the newest kids on the block. It was released in 2016, after analyzing its predecessors \u2014 React and Vue in particular. It was created by Rich Harris and is currently being maintained by Svelte core members. It\u2019s used by the following companies: The New York Times, Avast, Spotify, Semrush, and Chess. On its official website, Svelte is described as a component framework, but it resembles a compiler. It generates as small plain JavaScript code as possible to make the Svelte apps tiny and fast. It also ensures proper optimization. Svelte is doing pretty well for itself when it comes to its popularity. In the State of JS 2020 Survey, 86% of developers expressed their satisfaction in working with Svelte. In the more recent survey prepared by Stack Overflow in 2021, Svelte was chosen as the most loved framework by 71.42% of respondents \u2014 getting ahead of React (69.28%) and Vue (64.41%). But in general, Svelte is used less commonly than the other frameworks, so keep that in mind while looking at these numbers. Why was it created? Rich Harris is a creator of Ractive, a template-driven UI library developed with highly interactive apps in mind. It was originally created for The Guardian. But Harris wasn\u2019t exactly happy with that product. It didn\u2019t solve one crucial problem \u2014 the high cost of shipping Javascript, which heavily influenced mobile users. To deal with that, Harris came up with an idea for a framework-like-compiler, which lessens the overhead code needed by Svelte apps. Comparison of React and Svelte 1. Svelte is more performant In this regard, Svelte dominates not only over React, but also over Angular and Vue. In all the tests \u2014 including speed test, startup test, and memory test \u2014 Svelte is a clear winner. Where does that blazing fast performance come from? What gives Svelte such a significant edge is that it interprets the application code during build-time, instead of runtime. Additionally, because HTML, CSS, and JavaScript get compiled into tiny, highly-optimized bundles, the Svelte app receives business logic only. Other frameworks are forced to ship overhead framework code and force the browser to do the heavy-lifting, which slows everything down. What also improves the performance is the lack of the Virtual DOM, surprisingly. 2. Svelte doesn\u2019t use virtual DOM diffing Virtual DOM is the winning card of React and one of its most important features, responsible for improved performance. It was so good it heavily inspired Vue. That\u2019s why it was very bold of Svelte to discard it. But first, what is Virtual DOM? It\u2019s a virtual representation of the Document Object Model that serves as temporary memory storage for all the changes brought to the user interface. With the real DOM, each change would trigger an update, slowing down the web apps. Virtual DOM, on the other hand, delays that process until it finds the most efficient way to update and render the real DOM \u2014 which is also called the reconciliation process or diffing. Svelte disagreed that only with virtual DOM you can achieve great performance, and it managed to prove it. Diffing, while it can be effective, still requires a lot of work. So Svelte decided to skip that altogether. When does the DOM get updated with Svelte? Whenever the state of the web application changes due to the user\u2019s input, for example. It\u2019s an automated process that makes Svelte truly reactive. 3. Svelte is more reactive\u2026 or is it? React isn\u2019t fully reactive, although it tries to be. It certainly is declarative, meaning that instead of describing each step to reach a certain result, developers only need to describe the outcome. React handles the rest. But if there are any changes of values, they won\u2019t be automatically reflected in the DOM. React updates the components according to schedule. Without using this.setState or hooks, React won\u2019t\u2026 well, react properly. The thing is, Svelte also does a similar thing. It does update the DOM once a component\u2019s stage changes, but only when it\u2019s triggered by assignments. Until that point, all the changes are batched together. Sounds similar? But there are also reactive declarations and variables to consider. Reactive declarations are responsible for automatically recomputing logic during each update. And reactive variables, once declared and changed, trigger other variables to change, if they\u2019re related. It\u2019s laughably easy to do, too \u2014 just by adding a dollar sign. So is Svelte truly reactive? Probably as much as serverless doesn\u2019t have any servers. Compared to React, reactivity is achieved easier, but similar things can be done with both technologies. 4. Svelte components are dealt with a bit differently The way Svelte uses components (created in Svelte by making .svelte files)also differs from React. First of all, you don\u2019t have to do anything to export components \u2014 Svelte exports them on its own, automatically. With React, you had to do that manually. Also, Svelte offers flexible styling, which is possible due to components being scoped in their style tags. And you don\u2019t have to bother with writing unique classes, since Svelte generates them during the compile step. So worry about conflicts no more. There are also some similarities \u2014 for example, passing data to child components and emitting data back to parents components may seem familiar. 5. Svelte doesn\u2019t need as many third\u2013party tools React, being a very lightweight library focused on the view layer only, requires third-party tools for things like state management or to create amazing animations. This is not necessarily a bad thing \u2014 for small projects with little features, it might actually be perfect. Still, it\u2019s worth noting that Svelte has built-in effects, transitions, and animations that won\u2019t increase the size of your app \u2014 which is a direct result of code compilation. Svelte loads only the needed parts. Svelte also has several ways of dealing with state management. You can use: Context API: when your components need to communicate and pass data around, Svelte Stores: when your components need to communicate without passing too much data, Writable Stores: when you want to make objects accessible for different components, Readable Stores: when you don\u2019t want the user to manipulate the data. 6. Svelte is more lightweight The GZipped version of React is 42.2KB (including ReactDOM). The GZipped version of Svelte is 1.6KB. In this regard, Svelte is the undeniable winner. Because of its size, the web application loads faster, the responsiveness is flawless, and the bandwidth costs are lowered. 7. Svelte offers faster web development React\u2019s development pace is fast. Really fast. So fast it\u2019s hard to keep up at times, which is often cited as one of its disadvantages. Svelte\u2019s development process is even faster. How\u2019s that possible? The generated code is more readable, simpler, and way shorter than React\u2019s. You can achieve similar results with less code, without the fear of compromising the quality. This in turn means that the project is easy to maintain and even easier to debug. And if there are any new team members added to the Svelte project, they can quickly understand what\u2019s happening and start working immediately. 8. Svelte is (slightly) easier to learn The learning curve of both technologies is considered fairly easy. They both require a knowledge of HTML, CSS, and JavaScript. But Svelte once again managed to outdo React. In React, one of the hurdles is JSX, an XML-like syntax to JavaScript meant for building user interfaces. Svelte uses an easier syntax and it has its own templating language that\u2019s effortless to grasp. So is Svelte better than React? Svelte might seem wonderful \u2014 it\u2019s easy and makes the development experience a breeze \u2014 but it\u2019s still behind React in terms of popularity and usage. The biggest disadvantages of Svelte are: 1. Svelte doesn\u2019t have as rich community Because React is so popular, as proven by the influx of React apps, it has a giant community of passionate developers who make all sorts of tutorials and guides (often for free), and are readily available for brainstorming sessions. There\u2019s also an abundance of tools for facilitating the development process, like React Developer Tools or Redux DevTools, which goes hand in hand with Redux. Svelte can\u2019t count on the same level of community support. The lack of plugins, integrations, and IDE support is particularly bothersome. There are very few fixed best practices that could serve as a guide. And if you stumble upon a problem, the small user base might not be able to help you out. 2. Svelte isn\u2019t supported by a company Doesn\u2019t seem like a big deal? Well, it might be. React is supported and maintained by Facebook, which uses it for its own purposes. They have the necessary funds to keep working on it. Moreover, there\u2019s no fear that Facebook will suddenly switch to Angular, which is supported by Google. This makes React pretty much future-proof. Svelte\u2019s future isn\u2019t as clear-cut. It\u2019s being maintained by the community, but who knows how long their enthusiasm will last. It\u2019s possible that Svelte will inspire another new technology that will take its place. 3. Svelte isn\u2019t in common use in large\u2013scale web Svelte just recently matured enough for enterprise-scale applications. This means that there are not too many use cases of Svelte in the wild. Only recently Radio France added Svelte to their tech stack, just like Scott Tolinski used it for his Level Up Tutorials platform. So far, other technologies are preferred by influential players, and so Svelte remains to be battle-tested. Its future, while hopeful, remains unknown. Conclusion Svelte offers a lot. Praised for its size, highly efficient imperative code, as well as blazing-fast performance, Svelte might seem like a serious competitor to technologies like React or Angular. Unfortunately, Svelte still has a long way to go. So far, it\u2019s best to use for building single-page-applications for those with lower internet connections or simple personal websites like blogs or portfolios. It\u2019s definitely not replacing other frameworks in bigger companies\u2019 tech stack, and Svelte developers are in very little demand. For all its advantages, Svelte\u2019s time to shine is yet to come. Look out, React! But don\u2019t worry. For now, your crown stays in place.",image:"https://miro.medium.com/max/1400/1*Tif_f31T0O5IkrDFFtzn5A.png",tags:["tag1","tag2","tag3"],status:"published",createdAt:"2020-01-01",updatedAt:"2020-01-01"},{id:1,title:"Studio Ninja vs HoneyBook 2022: Time to Settle Down!",slug:"studio-ninja-vs-honeybook-2022-time-to-settle-down",author:{id:1,name:"Paulina",lastName:"Gajewska",slug:"paulina-gajewska",userName:"author2",email:"author2@gmail.com",avatar:"https://miro.medium.com/fit/c/176/176/1*zH2vEHbbMF4S6_7EgsvgRA.jpeg",bio:"Hi this is Paulina.I am a front-end developer.I love to create beautiful and functional websites.",website:"https://author2.com",facebook:"https://facebook.com",twitter:"https://twitter.com",gmail:"https://gmail.com"},description:"Every photographer needs a trusted camera that will serve them well ",content:"Every photographer needs a trusted camera that will serve them well \u2014 and so the grass is green and the sky is blue. But there\u2019s another thing that should become an inseparable part of a professional photographer, and yet it\u2019s often overlooked: reliable software that can turn anyone from an amateur into a true professional. Such software can take care of all your administrative tasks, freeing up your time and allowing you to focus on your craft instead. Also, beautifully crafted proposals and emails, as well as a fast response rate, will impress your clients and elevate their overall experience. That\u2019s why investing in a studio management tool or a client management system is such a great idea. It will boost your revenue, gain more customers through referral, and help you work more mindfully. Interested, but don\u2019t know where to start? Well, you\u2019re here for a treat then. In this Studio Ninja vs HoneyBook article we\u2019ll discuss the two leaders in the photography business world, who are famous for their excellent software. Fasten your seatbelts! We\u2019re in for a ride. Studio Ninja This studio management system was created by a wedding photographer Chris Garbacz, and a UX specialist, Yuan Wang, back in 2015. Before that, Chris was using a typical CRM for his business, but it was, in his opinion, too robust for his own needs. Many of the features, which were also more complicated than not, went unused. So he came up with an idea for a beautifully designed and simple software meant specifically for photographers. Once the idea was validated, he joined arms with Yuan Wang to make it a reality. To this day, Studio Ninja has been awarded twice, first in the Out of the Garage category at the Pause Awards 2020 and ICT Business of the Year at the MyBusiness Awards 2020. Two years later, Studio Ninja is sponsoring International Pet Photographer of the Year with a 12-month free license for their software. Photographers\u2019 Haven Studio Ninja heavily targets photographers, offering not only a tailored solution, but also lots of wisdom in their inclusive NINJACAST podcast or their own book, Shoot Like a Ninja. While other freelancers and creatives could also use this business app, they will have to suffer through this industry\u2019s jargon and to customize the software as much as possible to suit their needs. Because of settling down for a niche which is filled with freelancers ( even up to 63%), Studio Ninja avoided the fate of many similar systems \u2014 becoming an over bloated feature creep that nobody uses up to its full potential. After all, if you try to please everyone you will please no one. Simplicity is one of its biggest strengths, because it also offers a shallow learning curve. You don\u2019t need external consultants to set it up or build your processes. On the other hand, it leads to people calling Studio Ninja \u201Cimmature\u201D and \u201Ca work in progress\u201D ( source). Well, to each its own! Simple yet Effective UX/UI Design Studio Ninja comes with a simple yet pleasant, non-obtrusive design. The most important features \u2014 Dashboard, Clients, Leads, Jobs, Calendar, Payments, and Settings \u2014 can be found right at the top. The limited number of subpages doesn\u2019t overwhelm the user and their order makes logical sense. In the top right corner you can find your own Account Settings and Brands; if you have multiple photography brands, you can freely switch between them right there with the multiple brands feature. Additionally, it\u2019s worth noting the endearing name itself, the cute logo, and the communication style the Studio Ninja has adopted. It consistently uses the Ninja theme through all channels \u2014 in the Studio Management Software itself, in their newsletters (where they send us missions!), social media, and wherever they\u2019re present. This uniform branding makes Studio Ninja stand out, be memorable, and inspire friendly feelings. The Great Workflow The Workflow is, hands down, the best feature of Studio Ninja. And it looks good, too! By default, the Workflow is divided into three stages: Lead, Production, and Post-Production. Each stage can have four types of task assigned: To-do, Automation (emails, questionnaires, contracts), Extra Shoot (which will show up in your Calendar at once), Appointment (will also show up in your Calendar as well). With these four elements you can create a thorough and extensive Workflow, starting from the client\u2019s first inquiry to archiving the job. Any upcoming tasks will appear in your Dashboard and once you complete them, they\u2019ll be grayed out in your Workflow. And one little thing \u2014 some of these tasks will be ticked off automatically; for example, once your client accepts a quote or pays an invoice. Additionally, the workflows are fully customizable to suit your unique needs. You can create general, broad processes or very detailed ones, which won\u2019t let you forget about a single thing. Avoiding Double Bookings Like a Pro The worst scenario ever? Accidentally booking two shoots on the same day. If you also felt that shiver of horror, you understand just how awful that situation can be, especially if your work is well underway. Just imagine trying to explain yourself to the particular client that they have to find a new photographer as soon as possible, because you\u2019re booked elsewhere. And it\u2019s even worse when you\u2019re dealing with a happy couple on the way to get married. You\u2019ve just ruined the best day of their lives! Forget about getting a referral. Forget about maintaining a top-notch reputation for a professional photographer, too. Thankfully, Studio Ninja understands how terrible that can be and helps us avoid such fate \u2014 by detecting conflicting shoots and letting you know immediately with a glaring red icon. With such helpful features implemented, you can sleep at night more easily knowing that Studio Ninja watches out for any dangers that could harm your photography business. Work on the Go Photographers can be found in nature often enough. Between one shoot and another, in the flower field or on a castle ground, they might be wondering anxiously \u2014 what if someone wrote to them and expects immediate response? What if a potential lead turns to another vendor, because their response rate was faster? What if there was a cancellation, complication, or a myriad of important questions from a worried bride-to-be? Thankfully, Studio Ninja comes with a solution \u2014 by offering a mobile app on both Android and iOS that can accompany you all over the world. Your clients can reach you anywhere and anytime, and such care will surely bring positive results. Your customer service couldn\u2019t be more exemplary. Lone Wolf Simplicity If you\u2019re working on your own and don\u2019t plan on growing your business, Studio Ninja could be your best friend for many years to come. But if you want to bring in more photographers, collaborate, or even create your own team \u2014 or maybe start offering more broad services, including design, for example \u2014 this studio management software could be quickly outgrown. Studio Ninja doesn\u2019t support team collaboration and neither there\u2019s rich reporting or analytics that are necessary to gauge how your business is doing. So if you\u2019re thinking of growth in the future, maybe you should try a more robust solution that you can safely scale your business with. HoneyBook HoneyBook is Studio Ninja\u2019s predecessor by two years. It was created in 2013 by Dror Shimoni and a lovely couple, Naama and Oz Alon. They were also freelancers battling fiercely with bookkeeping and administrative tasks, until they decided to create a tool to solve these problems for them. Their product, in contrast to Studio Ninja, has a much broader audience. They don\u2019t focus on one industry but target all freelancers alike (or, as they say, \u201Cindependent business owners\u201D), from designers, web developers, coaches, florists, copywriters, videographers, to photographers and event planners. Because of that, HoneyBook is more of a universal tool that doesn\u2019t have as specific features as Studio Ninja. Top-Notch Project Management If you like knowing where your business is at with just a glance, you\u2019re in for a treat; HoneyBook has a wonderful overview of all your projects in a pipeline form, letting you quickly get back to speed and figure out your priorities. Most importantly, it brings order into your business. Before, if your process was nebulous at best, HoneyBook will force you to do some self-reflection and define what you\u2019ve been doing up until this point. Then, you\u2019ll have to divide your workflow into neat little steps and improve them by setting up automated emails & automated invoice reminders to make use of HoneyBook\u2019s full potential. When it\u2019s all up and running, you can join more free time that stems from organized processes that for the most part, run by themselves. Also, you\u2019ll be able to spot any bottlenecks or issues if your workflow is lacking anything, helping you improve it even more. This way, you\u2019ll be able to deliver the ultimate best value to all your clients on all fronts. Shallow Learning Curve HoneyBook, while it has more features than Studio Ninja, is still on the same level when it comes to simplicity. And that\u2019s because of a very smart UX design which doesn\u2019t overwhelm the users and help us get the hang of the software gradually. First of all, the main dashboard displays only the most important features \u2014 Projects, Google Calendar, Templates, Resources, and Bookkeeping. Everything else, like Automations, Time Tracker, Tasks, Reports, and so on, can be found right at the top under the Tools menu. This design divides the features into the most important ones and nice-to-haves; we don\u2019t have to learn all the features at once. At first, we can focus on the ones shown on Dashboard, and then slowly, over time, we can learn all the additional ones once we\u2019ve mastered the fundamentals. Excellent Client Portal HoneyBook comes with an elegant Client Portal which can be accessed by your clients. There, they can see all the messages exchanged, send new ones, view documents, attachments, review their online payments and see the upcoming ones, as well as check the project details. Of course, they won\u2019t be able to see your internal notes, tasks, or automations, your account details and pipelines, as well as other participants (which could be your collaborators, for example). What does it matter, though? What benefits can we expect from such a solution? Single source of truth. You swiftly eliminate any misunderstandings by having one platform with all the information pertaining to the project. Nobody can claim they weren\u2019t aware of something if that something is logged into the Client Portal, Fewer questions. You\u2019ll spend much less time answering emails with basic questions \u2014 your clients can log in to their space instead and find all the answers themselves, Piece of mind. You can rest assured that all the parties involved are kept up-to-date and there won\u2019t be any nasty surprises waiting for you. Intuitive Automation Automation is a double-edged sword. On one hand, it helps you streamline your processes and gives you more time to focus on things that truly matter. You don\u2019t have to remember which template emails should be sent when and to whom, it\u2019ll happen automatically. On the other hand, once you automate your processes a little too much and then a project strays from the common grounds, you might find yourself in trouble. Trouble meaning sending automated messages and attachments that are no longer relevant, which can bother your clients, lead to misunderstandings, and in overall, leave a bad impression. HoneyBook saves us from that fate by giving us just enough automation that can be set up in an easy-to-use editor. Such a visual path gives a better understanding of the whole process and eliminates the number of mistakes that we could have made otherwise. What HoneyBook allows us to do here is to automatically create tasks, send email messages and send files. The actions can be delayed \u2014 for example, we can send a file instantly after the payment was made or we can send it the next day. Customizable Templates Emails, Contact Forms, Brochures, Packages, Questionnaires, Proposals, Contracts, Invoices\u2026 So many things to prepare in advance! Not only have to write all of that down, but also present it in an eye-pleasing package. This could actually get very time-consuming, especially with iterations and fixing up mistakes (let\u2019s not kid ourselves, there\u2019s always something we\u2019ll notice after sending the message, right?). Thankfully, there\u2019s a shortcut. In the form of ready-made, customizable templates right in HoneyBook. With it, you can save your time and still deliver memorable files that will bring the customer experience to the next level. US and Canada Centric Unfortunately, there\u2019s a big fat downside to this wonderful software \u2014 it\u2019s limited to users located in the US and Canada. If you\u2019re from anywhere else in the world, you won\u2019t be able to use HoneyBook properly. Why is that? Most probably, it\u2019s because of HoneyBooks\u2019 payment options. There are no external payments gateways used most commonly, such as Stripe or Paypal. Instead, HoneyBook itself processes all the money, but the system isn\u2019t rich enough to include all the other countries. It\u2019s a real shame. Studio Ninja vs HoneyBook: The Verdict So here it is, a comparison between two great pieces of software that come with their own strengths and weaknesses. Which should you choose? If you\u2019re a professional photographer, Studio Ninja offers more curated experience. The features were created with photography business in mind and therefore, could be of real use to you. But if your craft is different and you like working on a pipeline, pick HoneyBook \u2014 but only if you\u2019re living in the US or Canada. An Alternative Studio Management Software If you didn\u2019t manage to find your One True Software, don\u2019t despair! There is an alternative you can consider. And this alternative is quite special, because unlike the other two, it\u2019s geared more towards teams than lone wolves. So if you prefer collaboration over total independence, try out Zendo, a perfect tool for managing custom and productized services with an internal chat that allows for better communication with clients and instant payments in the chat box. ",image:"https://miro.medium.com/max/700/1*xAsgyhvRRGbMp5hd72NDsQ.png",tags:["tag1","tag2","tag3"],status:"published",createdAt:"2020-02-01",updatedAt:"2020-02-01"},{id:2,title:"React vs. Svelte: The War Between Virtual and Real DOM",slug:"react-vs-sveltejs-the-war-between-virtual-and-real-dom",author:{id:2,name:"Keshav",lastName:"Kumaresan",slug:"keshav-kumaresan",userName:"author2",email:"author2@gmail.com",avatar:"https://miro.medium.com/fit/c/88/88/1*2X2zPgkyL45wTsWJVe2zxw.jpeg",bio:"Hello, This is Keshav and Im an backend developer at Google and love to work on open source projects!",website:"https://author2.com",facebook:"https://facebook.com",twitter:"https://twitter.com",gmail:"https://gmail.com"},description:"I recently had the pleasure of playing around",content:"I recently had the pleasure of playing around with Svelte and learned how to build a simple shopping cart application. Moreover, I couldn\u2019t help but notice many similarities it has with React. It\u2019s surprising to see how well of a contender it can be, to one of the most popular JavaScript libraries for building user interfaces. In this article, I\u2019m going to compare Svelte vs. React and how they fare against each other behind the scenes. Image by Iv\xE1n Tam\xE1s from Pixabay Svelte is a Compiler while React uses Virtual DOM React and Svelte, both provide a similar component-based architecture \u2014 that means both enable a CDD bottom-up development, and both enable sharing their components between apps, via tools and platforms like Bit (Github). Example: React components shared on Bit.dev using Bit The significant difference between them is that Svelte is a compiler that converts your application into ideal JavaScript during build time as opposed to React, which uses a virtual DOM to interpret the application code during runtime. Yes, that was quite a lot of jargon, let me break it down. Svelte vs React Behind the Scenes Svelte vs. React Behind the Scenes React Virtual DOM React uses a concept known as Virtual DOM (VDOM), where a virtual representation of the UI is kept in memory and synced with the real DOM through a process called reconciliation. The reconciliation process will find the difference (diffing) between the Virtual DOM (An object in memory, where we push the latest updates to the UI) and the real DOM (DOM holding the previously rendered UI). Using specific heuristic algorithms, it decides how to update the UI. This process, for the most part, is fast, reliable, and immensely reactive. Pun intended \u{1F604}. To achieve this, React bundles a certain amount of overhead code, which will run in the browser\u2019s JS engine to monitor and update the DOM based on various user interactions. Svelte Compiler Svelte is purely a compiler, that converts your application into ideal JavaScript code when you build the application for production. Meaning it won\u2019t inject any overhead code to run in the browser when your application is running to update the DOM. This approach is relatively new when compared to React, which generally takes advantage of the virtual DOM. Where Svelte is Strong Let\u2019s find out what are key benefits we can gain by using Svelte. The building time is blazing fast when compared to React or even other frameworks. Usage of rollup plugin as the bundler might be the secret here. Bundle size is smaller and tiny when gzipped when compared to React, and this is a huge plus point. Even with the shopping cart application I built, the initial load time and the duration to render the UI is extremely low, only the chunky images I have added takes some time :). Binding classes and variables are relatively easy, and custom logic is not needed when binding classes. Scoping CSS <style> within the component itself allows flexible styling. Easier to understand and get started when compared to other frameworks as the significant portion of Svelte is plain JavaScript, HTML, and CSS. More straightforward store implementation when compared to React\u2019s context API, granted context API provides more features, and Svelte might be simple enough for common scenarios. Where Svelte Falls Behind Let\u2019s find out where Svelte has its downsides. Svelte won\u2019t listen for reference updates and array mutations, which is a bummer, and developers need to actively look out for this and make sure arrays are reassigned so the UI will be updated. Usage style for DOM events can also be annoying, as we need to follow Svelte\u2019s specific syntax instead of using the predefined JS syntax. Cannot directly use onClick like in React, but instead, have to use special syntax such as on:click. Svelte is a new and young framework with minimal community support, thereby doesn\u2019t have support for a wide range of plugins and integrations that might be required by a heavy production application. React is a powerful contender here. No additional improvements. Ex- React suspense actively controls your code and how it runs and tries to optimize when the DOM is updated and sometimes even provide automatic loading spinners when waiting for data. These extra features and continued improvements are relatively low in Svelte. Some developers might not prefer using special syntaxes such as #if and #each within their templates and instead would want to use plain JavaScript, which React allows. This might come down to personal preferences. Conclusion Svelte\u2019s blazing fast build time and tiny bundle sizes are quite appealing when compared to React, especially for small everyday applications. Yet the enhanced features (context API, suspense, etc.), community support, a wide range of plugins and integrations along with certain syntax simplifications does render React attractive as well. Is Svelte better than react or vice versa? Well, Svelte does provide noticeable improvements in certain features when compared to React. But it may not still be significant or large enough to replace React completely. React is still robust and broadly adopted. Svelte has quite some catching up to do. But concept-wise, the compiling approach taken by Svelte has proven that virtual DOM diffing isn\u2019t the only approach to build fast reactive applications, and a good enough compiler can get the same job done as good as it gets. So which framework should you use for your next application? When weighing the Pros and Cons, In my opinion, if you are building a small application, like a simple e-commerce application for your startup, I would recommend Svelte. If you have a good knowledge of JS, HTML, and CSS, its easier to master Svelte. You can also build some powerful fast and lightweight applications with Svelte. For huge production applications that require several integrations and specific plugins, then maybe React still might be the way to go. Then again, much like React provides Next.js, Svelte also provides its production-ready Single Page Application framework called Sapper, which might be worth looking into. Both contenders are practical and efficient tools to build brilliant user interfaces. Choosing between the two as of now is mostly based on your scenario and preferences. As I have mentioned above, it\u2019s challenging to announce one winner since they both perform beautifully to achieve their primary goals. I hope this article gave you a quick comparison of React and Svelte. And it would be helpful to decide which library to choose for your next application. Cheers!",image:"https://miro.medium.com/max/700/1*SVLGTQm3xUZgU8n2QJfmyA.jpeg",tags:["tag1","tag2","tag3"],status:"published",createdAt:"2020-03-05",updatedAt:"2020-05-06"}];export{s as d,n as p};
